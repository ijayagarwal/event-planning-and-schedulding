# main.py
from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.security import OAuth2PasswordBearer
from fastapi.middleware.cors import CORSMiddleware
from typing import List, Optional
from datetime import datetime, timedelta
import jwt
import uvicorn
from pydantic import BaseModel
from databases import Database
import asyncpg

# Initialize FastAPI app
app = FastAPI(title="Event Planning System")

# Database configuration
DATABASE_URL = "postgresql://user:password@localhost/event_planning_db"
database = Database(DATABASE_URL)

# Authentication
SECRET_KEY = "your-secret-key"
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")

# Models
class UserCreate(BaseModel):
    name: str
    email: str
    password: str
    role: str

class EventCreate(BaseModel):
    title: str
    description: Optional[str]
    start_date: datetime
    end_date: datetime
    budget: float
    location: str

# Authentication middleware
async def get_current_user(token: str = Depends(oauth2_scheme)):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        user_id = payload.get("sub")
        if user_id is None:
            raise HTTPException(status_code=401)
        return user_id
    except jwt.JWTError:
        raise HTTPException(status_code=401)

# Routes
@app.post("/users/", status_code=status.HTTP_201_CREATED)
async def create_user(user: UserCreate):
    query = """
        INSERT INTO users (name, email, password_hash, role)
        VALUES (:name, :email, :password_hash, :role)
        RETURNING id
    """
    values = {
        "name": user.name,
        "email": user.email,
        "password_hash": hash_password(user.password),
        "role": user.role
    }
    try:
        user_id = await database.execute(query=query, values=values)
        return {"id": user_id}
    except asyncpg.UniqueViolationError:
        raise HTTPException(status_code=400, detail="Email already registered")

@app.post("/events/", status_code=status.HTTP_201_CREATED)
async def create_event(event: EventCreate, current_user: str = Depends(get_current_user)):
    # Check for scheduling conflicts
    conflict_query = """
        SELECT id FROM events
        WHERE (start_date, end_date) OVERLAPS (:start_date, :end_date)
        AND organizer_id = :organizer_id
    """
    conflict = await database.fetch_one(
        query=conflict_query,
        values={
            "start_date": event.start_date,
            "end_date": event.end_date,
            "organizer_id": current_user
        }
    )
    if conflict:
        raise HTTPException(status_code=400, detail="Scheduling conflict detected")

    # Create event
    query = """
        INSERT INTO events (title, description, start_date, end_date, budget, location, organizer_id)
        VALUES (:title, :description, :start_date, :end_date, :budget, :location, :organizer_id)
        RETURNING id
    """
    values = {
        **event.dict(),
        "organizer_id": current_user
    }
    event_id = await database.execute(query=query, values=values)
    return {"id": event_id}

@app.get("/events/")
async def list_events(current_user: str = Depends(get_current_user)):
    query = """
        SELECT e.*, u.name as organizer_name
        FROM events e
        JOIN users u ON e.organizer_id = u.id
        WHERE e.organizer_id = :user_id OR e.client_id = :user_id
        ORDER BY e.start_date DESC
    """
    events = await database.fetch_all(query=query, values={"user_id": current_user})
    return events

@app.post("/events/{event_id}/vendors")
async def add_vendor_to_event(
    event_id: str,
    vendor_id: str,
    current_user: str = Depends(get_current_user)
):
    # Check if user has permission
    event = await database.fetch_one(
        "SELECT * FROM events WHERE id = :id AND organizer_id = :user_id",
        values={"id": event_id, "user_id": current_user}
    )
    if not event:
        raise HTTPException(status_code=404, detail="Event not found or unauthorized")

    # Add vendor
    query = """
        INSERT INTO event_vendors (event_id, vendor_id)
        VALUES (:event_id, :vendor_id)
    """
    await database.execute(query=query, values={"event_id": event_id, "vendor_id": vendor_id})
    return {"status": "success"}

# Startup and shutdown events
@app.on_event("startup")
async def startup():
    await database.connect()

@app.on_event("shutdown")
async def shutdown():
    await database.disconnect()

if __name__ == "__main__":
    uvicorn.run("main:app", host="0.0.0.0", port=8000, reload=True)