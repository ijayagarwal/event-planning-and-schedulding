// server.js
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
require('dotenv').config();

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// MongoDB connection
mongoose.connect(process.env.MONGODB_URI || 'mongodb://localhost/event-planning', {
    useNewUrlParser: true,
    useUnifiedTopology: true
});

// Models
const userSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    role: { type: String, enum: ['organizer', 'client', 'vendor'], required: true }
});

const eventSchema = new mongoose.Schema({
    title: { type: String, required: true },
    description: String,
    clientId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    organizerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    status: { 
        type: String, 
        enum: ['draft', 'planned', 'confirmed', 'in_progress', 'completed', 'cancelled'],
        default: 'draft'
    },
    startDate: Date,
    endDate: Date,
    budget: Number,
    actualCost: { type: Number, default: 0 },
    location: String,
    vendors: [{ type: mongoose.Schema.Types.ObjectId, ref: 'User' }],
    createdAt: { type: Date, default: Date.now }
});

const notificationSchema = new mongoose.Schema({
    userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
    eventId: { type: mongoose.Schema.Types.ObjectId, ref: 'Event' },
    message: String,
    type: String,
    isRead: { type: Boolean, default: false },
    createdAt: { type: Date, default: Date.now }
});

const User = mongoose.model('User', userSchema);
const Event = mongoose.model('Event', eventSchema);
const Notification = mongoose.model('Notification', notificationSchema);

// Authentication middleware
const auth = async (req, res, next) => {
    try {
        const token = req.header('Authorization').replace('Bearer ', '');
        const decoded = jwt.verify(token, process.env.JWT_SECRET);
        const user = await User.findById(decoded.userId);
        
        if (!user) {
            throw new Error();
        }
        
        req.user = user;
        next();
    } catch (error) {
        res.status(401).send({ error: 'Authentication required' });
    }
};

// Routes
// User registration
app.post('/api/users/register', async (req, res) => {
    try {
        const { name, email, password, role } = req.body;
        const hashedPassword = await bcrypt.hash(password, 8);
        
        const user = new User({
            name,
            email,
            password: hashedPassword,
            role
        });
        
        await user.save();
        res.status(201).send({ message: 'User registered successfully' });
    } catch (error) {
        res.status(400).send({ error: error.message });
    }
});

// User login
app.post('/api/users/login', async (req, res) => {
    try {
        const { email, password } = req.body;
        const user = await User.findOne({ email });
        
        if (!user || !(await bcrypt.compare(password, user.password))) {
            throw new Error('Invalid login credentials');
        }
        
        const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET);
        res.send({ token });
    } catch (error) {
        res.status(400).send({ error: error.message });
    }
});

// Create event
app.post('/api/events', auth, async (req, res) => {
    try {
        const event = new Event({
            ...req.body,
            organizerId: req.user._id
        });
        
        await event.save();
        res.status(201).send(event);
    } catch (error) {
        res.status(400).send({ error: error.message });
    }
});

// Get events
app.get('/api/events', auth, async (req, res) => {
    try {
        const events = await Event.find({
            $or: [
                { organizerId: req.user._id },
                { clientId: req.user._id }
            ]
        }).populate('clientId organizerId vendors');
        
        res.send(events);
    } catch (error) {
        res.status(500).send({ error: error.message });
    }
});

// Update event
app.patch('/api/events/:id', auth, async (req, res) => {
    try {
        const event = await Event.findOneAndUpdate(
            { _id: req.params.id, organizerId: req.user._id },
            req.body,
            { new: true }
        );
        
        if (!event) {
            return res.status(404).send();
        }
        
        res.send(event);
    } catch (error) {
        res.status(400).send({ error: error.message });
    }
});

// Add vendor to event
app.post('/api/events/:id/vendors', auth, async (req, res) => {
    try {
        const event = await Event.findById(req.params.id);
        
        if (!event) {
            return res.status(404).send();
        }
        
        event.vendors.push(req.body.vendorId);
        await event.save();
        
        // Create notification
        await new Notification({
            userId: req.body.vendorId,
            eventId: event._id,
            message: `You've been added to event: ${event.title}`,
            type: 'vendor_assignment'
        }).save();
        
        res.send(event);
    } catch (error) {
        res.status(400).send({ error: error.message });
    }
});

// Get notifications
app.get('/api/notifications', auth, async (req, res) => {
    try {
        const notifications = await Notification.find({
            userId: req.user._id
        }).sort({ createdAt: -1 });
        
        res.send(notifications);
    } catch (error) {
        res.status(500).send({ error: error.message });
    }
});

// Mark notification as read
app.patch('/api/notifications/:id', auth, async (req, res) => {
    try {
        const notification = await Notification.findOneAndUpdate(
            { _id: req.params.id, userId: req.user._id },
            { isRead: true },
            { new: true }
        );
        
        if (!notification) {
            return res.status(404).send();
        }
        
        res.send(notification);
    } catch (error) {
        res.status(400).send({ error: error.message });
    }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on port ${PORT}`);
});